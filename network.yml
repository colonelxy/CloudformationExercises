Parameters:
  EnvironmentName:
    Description: An environment to be prefixed to resources
    Type: String

  AMI:
    Description: The machine image to be used in the launch
    # Default: ami-005de95e8ff495156
    Type: String

  InstanceType: 
    Description: Instance type to use 
    # Default: t2.medium
    Type: String

  KeyPair: 
    Description: key pair to use 
    # Default: mainKey
    Type: String

  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the Ip range for the VPC
    Type: String

  PublicSub1CIDR:
    Default: 10.0.0.0/24
    Description: Please enter the Ip range for the public subnet 1
    Type: String

  PublicSub2CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the Ip range for the public subnet 2
    Type: String

  PrivateSub1CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the Ip range for the private subnet 1
    Type: String

  PrivateSub2CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the Ip range for the private subnet 2
    Type: String


  #SSHLocation:
    #AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    #ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    #Default: 0.0.0.0/0
    #Description: The IP address range that can be used to access the web server using SSH.
    #MaxLength: '18'
    #MinLength: '9'
    #Type: String
 
Resources:
  #Create  the networking resources
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Ref EnvironmentName

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: !Ref EnvironmentName

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
      

  PublicSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSub1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public Subnet (AZ1)
      VpcId: !Ref VPC

  PublicSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PublicSub2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public Subnet (AZ2)
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB-RT
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable
#This one seems to be giving me problems when creating the stack
  # DefaultPublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: IGWAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref IGW
      
  PublicSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub1

  PublicSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub2
     
  PrivateSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRI-SUB(AZ1)
      VpcId: !Ref VPC

  PrivateSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}--PRI-SUB(AZ2)
      VpcId: !Ref VPC
      
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-RT1-(AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSub1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-RT2-(AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSub2

  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: IGWAttachment
      Properties:
        Domain: vpc

  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: IGWAttachment
      Properties:
        Domain: vpc
      
  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSub1

  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSub2

#Let's create the security groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALB security group enables http/https  traffic on port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  SSH security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          #CidrIp: !Ref SSHLocation
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Enables HTTP/HTTPS access via port 80/443 locked down to the load balancer SG and ssh security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags: 
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Open DB for access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags: 
        - Key: Name
          Value: Database Security Group
      VpcId: !Ref VPC
        

#Create the launch configurations

#Create role policy
  S3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:Get'
                Resource: !Sub "arn:${AWS::Partition}:s3::s3webbucket/*"
            
      
  # Instance profile role
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3ReadOnlyRole

  ServerConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      KeyName: !Ref KeyPair
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ServerInstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            mkdir /home/ec2-user/s3-serv
            aws s3 cp s3://s3webbucket/project2.zip /tmp
            unzip -d /home/ec2-user/s3-serv /tmp/project2.zip

            eecho "it works! Udagram, Udacity" > index.html

#Create the autoscaling group
  ServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Join [',', [!Ref PrivateSub1, !Ref PrivateSub2 ]]
      LaunchConfigurationName: 
        Ref: ServerConfig
      MinSize: "3"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: AppTargetGroup

BSecurityGroup
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'AppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # TargetType: instance
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC#Create the load balancing

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSub1
      - !Ref PublicSub2
      SecurityGroups:
      - Ref: AL
        # -Fn::ImportValue: !Sub "${EnvironmentName}-VPC"

#Create S3 bucket
  s3webbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-bucket"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      

#Create bucket policy
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3webbucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:*
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 's3webbucket', '/*']]
            Principal:
              AWS: '*'

Outputs:
  WebAppLBUrl:
    Description: Application load balancer public url
    Export:
      Name: !Sub ${EnvironmentName}-WebAppLBURL
    Value: !Join [ "", [http://, !GetAtt WebAppLB.DNSName]]
    