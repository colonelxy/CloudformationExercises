AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a VPC with public and private subnets
Metadata:
  AWS::Cloudformation::Interface:
    ParameterGroups:
      - 
        Label:
          Default: "VPC CIDR"
          Parameters:
            - VpcCIDR
      -
        Label:
          Default: "Subnet CIDR"
          Parameters:
            - PublicSub1CIDR
            - PublicSub2CIDR
            - PrivateSub1CIDR
            - PrivateSub2CIDR
            - PrivateSub3CIDR
            - PrivateSub4CIDR
      -
        Label:
          Default: "SSH CIDR"
          Parameters:
            - SSHLocation

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the Ip range for the VPC
    Type: String

  PublicSub1CIDR:
    Default: 10.0.0.0/24
    Description: Please enter the Ip range for the public subnet 1
    Type: String

  PublicSub2CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the Ip range for the public subnet 2
    Type: String

  PrivateSub1CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the Ip range for the private subnet 1
    Type: String

  PrivateSub2CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the Ip range for the private subnet 2
    Type: String

  PrivateSub3CIDR:
    Default: 10.0.4.0/24
    Description: Please enter the Ip range for the private subnet 3
    Type: String

  PrivateSub4CIDR:
    Default: 10.0.5.0/24
    Description: Please enter the Ip range for the private subnet 4
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Test VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: Test IGW

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
      

  PublicSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSub1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PublicSub2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: Public route table
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub1

  PublicSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub2
     
  PrivateSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 1 | App Tier
      VpcId: !Ref VPC

  PrivateSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 2 | App Tier
      VpcId: !Ref VPC

  PrivateSub3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub3CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 3 | App Tier
      VpcId: !Ref VPC

  PrivateSub4:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [3, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub4CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 4 | App Tier
      VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALB security group enables http/https  traffic on port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  SSH security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags: 
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Enables HTTP/HTTPS access via port 80/443 locked down to the load balancer SG and ssh security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags: 
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Open DB for access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags: 
        - Key: Name
          Value: Database Security Group
      VpcId: !Ref VPC


Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  PublicSub1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSub1
    Value: !Ref PublicSub1

  PublicSub2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSub2
    Value: !Ref PublicSub2

  PrivateSub1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub1
    Value: !Ref PrivateSub1

  PrivateSub2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub2
    Value: !Ref PrivateSub2

  PrivateSub3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub3
    Value: !Ref PrivateSub3

  PrivateSub4:
    Description: Private Subnet 4 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub4
    Value: !Ref PrivateSub4

  ALBSecurityGroup:
    Description: ALB security group
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

  SSHSecurityGroup:
    Description: SSH security group
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

  WebServerSecurityGroup:
    Description: Web server security group
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

  DBSecurityGroup:
    Description: DB security group
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
    Value: !Ref DBSecurityGroup