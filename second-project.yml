AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a VPC with public and private subnets, load balancer, autoscaling group, S3 bucket and servers

Parameters:
  EnvironmentName:
    Description: The name to be prefixed to resources
    Type: String

  AMI:
    Description: The machine image to be used in the launch
    Type: String

  InstanceType: 
    Description: Instance type to use 
    Type: String


  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the Ip range for the VPC
    Type: String

  PublicSub1CIDR:
    Default: 10.0.0.0/24
    Description: Please enter the Ip range for the public subnet 1
    Type: String

  PublicSub2CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the Ip range for the public subnet 2
    Type: String

  PrivateSub1CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the Ip range for the private subnet 1
    Type: String

  PrivateSub2CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the Ip range for the private subnet 2
    Type: String


  #SSHLocation:
    #AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    #ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    #Default: 0.0.0.0/0
    #Description: The IP address range that can be used to access the web server using SSH.
    #MaxLength: '18'
    #MinLength: '9'
    #Type: String
 
Resources:
  
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Test VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: Test IGW

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
      

  PublicSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PublicSub1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PublicSub2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-PUB-RT
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  #DefaultPublicRoute:
    #Type: AWS::EC2::Route
    #DependsOn: IGWAttachment
    #Properties:
      #RouteTableId: !Ref PublicRouteTable
      #DestinationCidrBlock: 0.0.0.0/0
      #GatewayId: !Ref IGW
      
  PublicSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub1

  PublicSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSub2
     
  PrivateSub1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-PRI-SUB1
      VpcId: !Ref VPC

  PrivateSub2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSub2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-PRI-SUB2
      VpcId: !Ref VPC
      
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-RT1-(AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSub1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-RT2-(AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSub2

  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: IGWAttachment
      Properties:
        Domain: vpc

  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: IGWAttachment
      Properties:
        Domain: vpc
      
  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSub1

  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSub2
        
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALB security group enables http/https  traffic on port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  SSH security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          #CidrIp: !Ref SSHLocation
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Enables HTTP/HTTPS access via port 80/443 locked down to the load balancer SG and ssh security group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags: 
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription:  Open DB for access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags: 
        - Key: Name
          Value: Database Security Group
      VpcId: !Ref VPC

  
# Creates the ec2 role for the webserver instance
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: RoleForSSMAccess
      Description: IAM role allowing EC2 Session Manager to access our server
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              
      #Path: /
      #The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMmanagedInstanceCore
      #Policies: []

# Instance profile
  ServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref IAMRole

  ServerConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      KeyName: mainKey
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            systemctl enable apache2.service
            cd /var/www/html
            aws s3 cp s3://home/lxmint/Documents/Projects/host.zip
            unzip -o host.zip
            echo "Udacity Demo Web Server Up and Running!" > index.html

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSub1
      - !Ref PublicSub2
      SecurityGroups:
      - Ref: ALBSecurityGroup
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'AppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${AWS::StackName}-VPC"

#AppRole:
    #Type: AWS::IAM::InstanceProfile
    #Properties: 
      #Roles:
        #- UdacityS3ReadOnlyEC2

  #BastionHost:
    #Type: AWS::EC2::Instance
    #DependsOn:
    #- AttachGateway
    #Properties:
     # KeyName: !Ref 'KeyPairName'
     # ImageId: !FindInMap [RegionMap, !Ref #'AWS::Region', AMI]
      #InstanceType: t2.micro
      #NetworkInterfaces:
      #- AssociatePublicIpAddress: true
       # DeleteOnTermination: true
        #Description: ENI for bastion host
        #DeviceIndex: '0'
        #SubnetId: !Ref 'PublicSubnet'
        #GroupSet:
        #- !Ref 'PublicInstanceSG'
      #Tags:
      #- Key: Name
       # Value: !Sub 'Linux bastion ${VPCCIDR}'
      #- Key: CloudFormationStack
       # Value: !Ref 'AWS::StackId'

Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  PublicSub1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSub1
    Value: !Ref PublicSub1

  PublicSub2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSub2
    Value: !Ref PublicSub2

  PrivateSub1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub1
    Value: !Ref PrivateSub1

  PrivateSub2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSub2
    Value: !Ref PrivateSub2

  ALBSecurityGroup:
    Description: ALB security group
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

  SSHSecurityGroup:
    Description: SSH security group
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup

  WebServerSecurityGroup:
    Description: Web server security group
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

  DBSecurityGroup:
    Description: DB security group
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
    Value: !Ref DBSecurityGroup

  WebAppLBUrl:
    Description: Application load balancer public url
    Export:
      Name: !Sub ${AWS::StackName}-WebAppLB
    Value: !Join [ "", [http://, !GetAtt WebAppLB.DNSName]]
    
  ALBListener:
    Description: ALB Listener
    Export:
      Name: !Sub ${AWS::StackName}-ALBListener
    Value: !Ref ALBListener

  ALBListenerRule:
    Description: DB security group
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
    Value: !Ref DBSecurityGroup

  AppTargetGroup:
    Description: ALB Listener Rule
    Export:
      Name: !Sub ${AWS::StackName}-ALBListenerRule
    Value: !Ref ALBListenerRule

  
  
# Sample UserData

#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html