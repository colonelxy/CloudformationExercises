AWSTemplateFormatVersion: 2010-09-09
Description: 
  Harold A | Udacity 2022
  AWS-CloudFormation template for a highly available Udagram app.

# Declare the parameters

Parameters:
  EnvName:
    Description: The environment name to prefix to resource names
    Type: String
    Default: uapp

  VpcCIDR:
    Description: The IP range for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSub1CIDR:
    Description: The IP range  for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSub2CIDR:
    Description: The IP range for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSub1CIDR:
    Description: The IP range for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSub2CIDR:
    Description: The IP range for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

# The resources to set up our project
Resources:
  VPC: #we start witht he VPC
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref EnvName

  IGW: #Create the internet gateway to allow internet access in and out
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref EnvName

  IGWAttachment: # the internet gateway attachment for the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSub1: # the public subnet in AZ 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSub1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvName}-PublicSub(AZ1)

  PublicSub2: #Public subnet in AZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSub2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvName}-PublicSub(AZ2)

  PrivateSub1: #The private subnet in AZ1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSub1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvName}-PrivateSub(AZ1)

  PrivateSub2: #Private subnet in AZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSub2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvName}-PrivateSub(AZ2)

# Add the elastic Ips for the Nat gateways
  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGWyAttachment
    Properties:
      Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGWAttachment
    Properties:
      Domain: vpc

# Creat the nat gateways
  NatGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSub1

  NatGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSub2

  # Routing tables and routes
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvName}-Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSub1

  PublicSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSub2

  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvName}-Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT1
      SubnetId: !Ref PrivateSub1

  # The second private route table in case of expansion
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvName}-Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW2

  PrivateSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT2
      SubnetId: !Ref PrivateSub2